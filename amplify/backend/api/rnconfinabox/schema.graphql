type Talk @model {
  id: ID!
  name: String!
  speakers: [Speaker] @connection(name: "SpeakersTalk")
  time: String
  timeStamp: String
  date: String
  location: String
  summary: String!
  twitter: String
  github: String
  comments: [Comment] @connection(name: "TalkComments", keyField: "talkId")
}

type Speaker @model {
  id: ID!
  talk: Talk @connection(name: "SpeakersTalk")
  speakerName: String!
  speakerBio: String!
  speakerAvatar: String
}

type User @model {
  id: ID!
  talks: [Talk]
}

type Comment @model {
  id: ID!
  talkId: ID
  talk: Talk @connection(sortField: "createdAt", name: "TalkComments", keyField: "talkId")
  message: String
  createdAt: String
  createdBy: String
  deviceId: ID
}

type Report @model {
	id: ID!
	commentId: ID!
	comment: String!
	talkTitle: String!
	deviceId: ID
}

type ModelCommentConnection {
	items: [Comment]
	nextToken: String
}

type Query {
  listCommentsByTalkId(talkId: ID!): ModelCommentConnection
}

type Subscription {
  onCreateCommentWithId(talkId: ID!): Comment
		@aws_subscribe(mutations: ["createComment"])
}